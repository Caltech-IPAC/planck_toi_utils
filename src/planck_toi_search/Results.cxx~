#include <stdexcept>
#include <CCfits/CCfits>

#include "Results.hxx"
#include "tinyhtm.h"

bool Results::callback(void *entry, int num_elements, hid_t *, char **names)
{
  if(utc_index==static_cast<size_t>(-1))
    {
      for(int i=0;i<num_elements;++i)
        {
          if(names[i]==std::string("UTC"))
            {
              utc_index=i;
            }
          else if(names[i]==std::string("TSKY"))
            {
              tsky_index=i;
            }
          else if(names[i]==std::string("RING"))
            {
              ring_index=i;
            }
          else if(names[i]==std::string("x"))
            {
              x_index=i;
            }
          else if(names[i]==std::string("y"))
            {
              y_index=i;
            }
          else if(names[i]==std::string("z"))
            {
              z_index=i;
            }
          else
            {
              // FIXME: This will certainly be fatal, since we can not
              // catch exceptions called from threads.
              throw std::runtime_error("Bad column name: "
                                       + std::string(names[i]));
            }
        }
      if(x_index==static_cast<size_t>(-1))
        throw std::runtime_error("Missing column 'x' in HTM file");
      if(y_index==static_cast<size_t>(-1))
        throw std::runtime_error("Missing column 'y' in HTM file");
      if(z_index==static_cast<size_t>(-1))
        throw std::runtime_error("Missing column 'z' in HTM file");
      if(utc_index==static_cast<size_t>(-1))
        throw std::runtime_error("Missing column 'UTC' in HTM file");
      if(tsky_index==static_cast<size_t>(-1))
        throw std::runtime_error("Missing column 'TSKY' in HTM file");
      if(ring_index==static_cast<size_t>(-1))
        throw std::runtime_error("Missing column 'RING' in HTM file");
    }

  uint64_t utc=*((uint64_t *)(entry)+utc_index);

  bool in_interval(time_intervals.empty());
  for(auto &t: time_intervals)
    {
      if(utc>=t.first && utc<t.second)
        {
          in_interval=true;
          break;
        }
    }
  if(in_interval && !count)
    {
      double x(((double *)(entry))[x_index]),
        y(((double *)(entry))[y_index]),
        z(((double *)(entry))[z_index]),
        tsky(((double *)(entry))[tsky_index]),
        ring(((uint64_t *)(entry))[ring_index]);
      data.push_back(std::make_tuple(x,y,z,utc,tsky,ring));
    }
  return in_interval;
}

void Results::write_fits(char * fname)
{
    htm_v3 v3;
    int errcode;

    std::auto_ptr<CCfits::FITS> pFits(0);
    const std::string fileName(fname);
    pFits.reset(new CCfits::FITS(fileName,  CCfits::Write));

    unsigned long rows(2);
    int size = data.size();
    std::cout << "Number of rows = " << size << "\n";

    htm_sc sc;
    int bufsize(1024);
    double lon[bufsize];
    double lat[bufsize];
    
    string hduName("TABLE_BINARY");


//
// Need to add handling of SSO object searches - which add
// SSO_GLON and SSO_GLAT columns.
//
    std::vector<string> colName(5);
    std::vector<string> colForm(5);
    std::vector<string> colUnit(5);

    colName[0] = "TIME_TAI";
    colName[1] = "GLON";
    colName[2] = "GLAT";
    colName[3] = "PSI";
    colName[4] = "SIGNAL";  

    colForm[0] = "1D";
    colForm[1] = "1E";
    colForm[2] = "1E";
    colForm[3] = "1E";
    colForm[4] = "1E";

    colUnit[0] = "s";
    colUnit[1] = "degrees";
    colUnit[2] = "degrees";
    colUnit[3] = "degrees";
// 
// Need to add awareness of frequency since 545/857 GHz are in Mjy/sr
//
    colUnit[4] = "K_CMB";  

    CCfits::Table *newTable =  pFits->addTable(hduName, rows, colName, colForm, colUnit);

    int i = 0;
    int nbuf = 0;

    for (auto &r: data)
    {
        v3.x = std::get<0>(r);
        v3.y = std::get<1>(r);
        v3.z = std::get<2>(r);
        errcode = htm_v3_tosc(&sc, &v3);
        lon[i] = sc.lon;
        lat[i] = sc.lat;
    
        if (++i == bufsize) {
            newTable->column("GLON").write(lon, bufsize, nbuf*bufsize + 1);
            newTable->column("GLAT").write(lat, bufsize, nbuf*bufsize + 1);
            i = 0;
            nbuf++;
        }
    }
 
    if (i > 0) {
        newTable->column("GLON").write(lon, i, nbuf*bufsize + 1);
        newTable->column("GLAT").write(lat, i, nbuf*bufsize + 1);
    }
}
